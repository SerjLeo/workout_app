name: Production

on:
  pull_request:
    branches: [ master ]
    types:
      - closed
  workflow_dispatch:

env:
  CONTAINER_NAME: workout-app
  CONTAINER_PORT: 3100
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}-prod

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        working-directory: ./client
        run: yarn ci

      - name: Build project
        working-directory: ./client
        run: yarn build

  tests:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        working-directory: ./client
        run: yarn ci

      - name: Lint
        working-directory: ./client
        run: yarn lint

      - name: Run unit tests
        working-directory: ./client
        run: yarn test

  shipping:
    name: Prepare docker image
    needs: [build, tests]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build and push Docker image
        id:   docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    name: Production deploy
    runs-on: ubuntu-latest
    needs: shipping
    steps:
      - name: Executing remote command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          PORT: ${{ secrets.PORT }}
          KEY: ${{ secrets.SSHKEY }}
          script: |
            docker pull ${{ env.IMAGE_NAME }}:latest &&
            docker ps -aq --filter name=${{ env.CONTAINER_NAME }} | xargs -r docker stop | xargs -r docker rm &&
            docker run --name ${{ env.CONTAINER_NAME }} -d -p ${{ env.CONTAINER_PORT }}:${{ env.CONTAINER_PORT }} ${{ env.IMAGE_NAME }}
